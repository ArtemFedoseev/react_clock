{"version":3,"sources":["Components/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["getDate","Date","toLocaleTimeString","Clock","state","date","timer","setInterval","this","setState","prevProps","prevName","useName","props","console","log","clearInterval","className","React","Component","getRandomNumber","Math","floor","random","App","clockName","isClockVisible","toggleClock","currentClockState","setRandomName","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"sNAEMA,EAAU,WAGd,OAFa,IAAIC,MAELC,sBA2DCC,E,4MA/CbC,MAAQ,CACNC,KAAML,K,EAGRM,MAAwCC,aAAY,kBAAO,IAAO,K,uDAElE,WAAqB,IAAD,OAClBC,KAAKF,MAAQC,aAAY,WACvB,EAAKE,SAAS,CACZJ,KAAML,QAEP,O,gCAGL,SAAmBU,GACjB,IAAMC,EAAWD,EAAUE,QAEvBD,IAAaH,KAAKK,MAAMD,SAE1BE,QAAQC,IAAR,qCAA0CJ,EAA1C,eAAyDH,KAAKK,MAAMD,Y,kCAIxE,WACEI,cAAcR,KAAKF,S,oBAGrB,WACE,IAAQD,EAASG,KAAKJ,MAAdC,KACAO,EAAYJ,KAAKK,MAAjBD,QAKR,OAFAE,QAAQC,IAAIV,GAGV,sBAAKY,UAAU,MAAf,UACE,6BAAKL,IACL,8CAEG,IACAP,Y,GAzCSa,IAAMC,WCZpBC,EAAkB,WACtB,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,WAgDVC,E,4MArCbpB,MAAQ,CACNqB,UAAW,cACXC,gBAAgB,G,EAGlBC,YAAc,WACZ,IAAMC,EAAoB,EAAKxB,MAAMsB,eAErC,EAAKjB,SAAS,CACZiB,gBAAiBE,K,EAIrBC,cAAgB,WACd,EAAKpB,SAAS,CACZgB,UAAWL,O,4CAIf,WACE,MAAsCZ,KAAKJ,MAAnCsB,EAAR,EAAQA,eAAgBD,EAAxB,EAAwBA,UAExB,OACE,gCACGC,GAAkB,cAAC,EAAD,CAAOd,QAASa,IAEnC,wBAAQK,KAAK,SAASC,QAASvB,KAAKmB,YAApC,mBACMD,EAAiB,aAAe,gBAEtC,wBAAQI,KAAK,SAASC,QAASvB,KAAKqB,cAApC,oC,GA9BUX,IAAMC,WCZxBa,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8b55103b.chunk.js","sourcesContent":["import React from 'react';\n\nconst getDate = () => {\n  const date = new Date();\n\n  return date.toLocaleTimeString();\n};\n\ntype Props = {\n  useName: string | number,\n};\n\ntype State = {\n  date: string;\n};\n\nclass Clock extends React.Component<Props, State> {\n  state = {\n    date: getDate(),\n  };\n\n  timer: ReturnType<typeof setInterval> = setInterval(() => (true), 1000);\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState({\n        date: getDate(),\n      });\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevName = prevProps.useName;\n\n    if (prevName !== this.props.useName) {\n      // eslint-disable-next-line\n      console.log(`The Clock was renamed from ${prevName} to ${this.props.useName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { date } = this.state;\n    const { useName } = this.props;\n\n    // eslint-disable-next-line\n    console.log(date);\n\n    return (\n      <div className=\"App\">\n        <h1>{useName}</h1>\n        <p>\n          Current time:\n          {' '}\n          {date}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from 'react';\nimport './App.scss';\nimport Clock from './Components/Clock/Clock';\n\nconst getRandomNumber = () => {\n  return Math.floor(Math.random() * 1000);\n};\n\ntype Props = {};\n\ntype State = {\n  clockName: string | number,\n  isClockVisible: boolean,\n};\n\nclass App extends React.Component<Props, State> {\n  state = {\n    clockName: 'React clock',\n    isClockVisible: true,\n  };\n\n  toggleClock = () => {\n    const currentClockState = this.state.isClockVisible;\n\n    this.setState({\n      isClockVisible: !currentClockState,\n    });\n  };\n\n  setRandomName = () => {\n    this.setState({\n      clockName: getRandomNumber(),\n    });\n  };\n\n  render() {\n    const { isClockVisible, clockName } = this.state;\n\n    return (\n      <div>\n        {isClockVisible && <Clock useName={clockName} />}\n\n        <button type=\"button\" onClick={this.toggleClock}>\n          {`${isClockVisible ? 'Hide Clock' : 'Show clock'}`}\n        </button>\n        <button type=\"button\" onClick={this.setRandomName}>\n          Set random name\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}